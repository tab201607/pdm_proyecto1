
AVRASM ver. 2.2.8  C:\Users\kirby\Documents\Atmel Studio\7.0\Proyecto PdM - Reloj\Proyecto reloj\Proyecto reloj\main.asm Tue Mar 12 13:13:32 2024

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
C:\Users\kirby\Documents\Atmel Studio\7.0\Proyecto PdM - Reloj\Proyecto reloj\Proyecto reloj\main.asm(12): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\M328PDEF.inc'
C:\Users\kirby\Documents\Atmel Studio\7.0\Proyecto PdM - Reloj\Proyecto reloj\Proyecto reloj\main.asm(26): warning: Register r26 already defined by the .DEF directive
C:\Users\kirby\Documents\Atmel Studio\7.0\Proyecto PdM - Reloj\Proyecto reloj\Proyecto reloj\main.asm(28): warning: Register r27 already defined by the .DEF directive
C:\Users\kirby\Documents\Atmel Studio\7.0\Proyecto PdM - Reloj\Proyecto reloj\Proyecto reloj\main.asm(29): warning: Register r28 already defined by the .DEF directive
C:\Users\kirby\Documents\Atmel Studio\7.0\Proyecto PdM - Reloj\Proyecto reloj\Proyecto reloj\main.asm(31): warning: Register r29 already defined by the .DEF directive
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
C:\Users\kirby\Documents\Atmel Studio\7.0\Proyecto PdM - Reloj\Proyecto reloj\Proyecto reloj\main.asm(12): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\M328PDEF.inc'
                                 
                                 ;******************************************************************************
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Universidad del Valle de Guatemala 
                                 ; 1E2023: Programacion de Microcontroladores 
                                 ; main.asm 
                                 ; Autor: Jacob Tabush 
                                 ; Proyecto: Proyecto PdM
                                 ; Hardware: ATMEGA328P 
                                 ; Creado: 21/02/2024 
                                 ; Ultima modificacion: 6/03/2024 
                                 ;*******************************************************************************
                                 
                                 .include "M328PDEF.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; dejamos a R16 a R18 para uso general 
                                 
                                 .def outerloop=R19
                                 
                                 .def timeseg=R20 ; reservamos un register para el contador de los segundos, usaremos los primeros 4 bits para el primer digito y los segundo 4 bits para el segundo digito
                                 .def timemin=R21 ;  reservamos un register para el contador de los minutos, misma config que los segundos
                                 .def timehr=R22 ; reservamos un register para el contador de las horas, misma config que los primeros 2
                                 
                                 .def alarmmin=R23 ; alarma minutos, 0-3 ones, 4-6 tens
                                 .def alarmhr=R24 ; alarma horas, 0-3 ones, 4-5 tens
                                 
                                 .def day=R25  ; dia 
                                 .def month=R26 ; mes
                                 
                                 .def muxshow=R27 ; reservamos un register para determinar que mostrar en el mux
                                 .def debouncetimer=R28 ; reservamos un register para el timer del debounce
                                 
                                 .def state=R29 ; estado de la maquina. Bits 0 - 1 corresponden a desplegar el tiempo, alarma y fecha. 
                                 ;Bit 2 se activa cuando se esta cambiando el dado valor, y 3 cuando la alarma se activa
                                 ; utilizamos bits 4-5 para modos de editar
                                 ; y 6-7 para los estados de los botones
                                 
                                 .equ timr1reset = 235 ; outer loop time length
                                 
                                 .equ timr2reset = 50 ; muxeo debounce time length
                                 
                                 .cseg
                                 .org 0x00
000000 940c 0022                 JMP MAIN ; vector reset
                                 
                                 .org 0x0008 ; Vector de ISR: PCINT1
000008 940c 0167                 	JMP ISR_PCINT1
                                 
                                 	.org 0x0012
000012 940c 0179                 	JMP ISR_TIMR2
                                 
                                 	.org 0x0020 ; Vector de ISR: Timer 0 overflow
000020 940c 0183                 	JMP ISR_TIMR0
                                 
                                 
                                 MAIN:
                                 ; STACK POINTER
                                 
000022 ef0f                      LDI R16, LOW(RAMEND)
000023 bf0d                      OUT SPL, R16
000024 e018                      LDI R17, HIGH(RAMEND)
000025 bf1e                      OUT SPH, R17
                                 
                                 ; nuestra tabla de valores del 7 seg, con pin0 = a, pin1 = b...
000026 7940
000027 3024
000028 1219
000029 7802
00002a 1800
00002b 0308
00002c 2127
00002d 0e06                      tabla7seg: .DB  0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x18, 0x08, 0x03, 0x27, 0x21, 0x06, 0x0E
                                 
                                 
                                 ; nuestra tabla que contiene que tan largo es cada mes
00002e 2831
00002f 3031
000030 3031
000031 3131
000032 0030
000033 0000
000034 0000
000035 3100
000036 3130                      monthlengths: .DB 0x31, 0x28, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x30, 0x31
                                 
                                 ; ///////////////////////////////////////////////////////
                                 ; Configuracion
                                 ; ///////////////////////////////////////////////////////
                                 
                                 Setup:
                                 
                                 ;  prescaler
                                 
000037 e800                      LDI R16, 0b1000_0000
000038 9300 0061                 STS CLKPR, R16
                                 
00003a e003                      LDI R16, 0b0000_0011 ;1 MHz
00003b 9300 0061                 STS CLKPR, R16 
                                 
                                 ; utilizamos D para controlar el disp de 7 segmentos
00003d ef0f                      LDI R16, 0xFF
00003e b90a                      OUT DDRD, R16 ;Ponemos a todo D como salidas
00003f e000                      LDI R16, 0x00
000040 b90b                      OUT PORTD, R16 ; Apagamos todas las salidas
                                 
                                 ; Utilizamos C para los botones, y alarma con indicador
000041 e00c                      LDI R16, 0b0000_1100
000042 b907                      OUT DDRC, R16 ; Ponemos a todo C como entradas 
000043 e103                      LDI R16, 0b0001_0011
000044 b908                      OUT PORTC, R16 ; Encendemos pullups en 2
                                 
                                 ; Utilizamos B para mux de los displays y la alarma
000045 e10f                      LDI R16, 0b0001_1111
000046 b904                      OUT DDRB, R16 
000047 e000                      LDI R16, 0b0000_0000
000048 b905                      OUT PORTB, R16 
                                 
                                 ; Habilitamos pin change interrupt en PC0-PC2
000049 e002                      LDI R16, 0x02
00004a 9300 0068                 STS PCICR, R16
00004c e103                      LDI R16, 0b0001_0011
00004d 9300 006c                 STS PCMSK1, R16
                                 
                                 ; Habilitamos un interrupt en timr0 y timr2 overflow
00004f e001                      LDI R16, 0x01
000050 9300 006e                 STS TIMSK0, R16
000052 9300 0070                 STS TIMSK2, R16
                                 
000054 e000                      LDI R16, 0x00
000055 9300 00c1                 STS UCSR0B, R16 ; deshablitamos el serial en pd0 y pd1
                                 
                                 timer0init: ; utilizaremos el timer 0 para todo el toma de tiempo principal del doc (como el 
                                 
000057 e005                      LDI R16, (1 << CS02) | (1 << CS00)
000058 bd05                      OUT TCCR0B, R16 ; prescaler de 1024
                                 
000059 ee0b                      LDI R16, timr1reset ; Cargamos 235 al contador = aproximadamente 10ms
00005a bd06                      OUT TCNT0, R16
                                 
                                 timer2init: ; utilizamos el timer 2 para el muxeo y para debouncear los botones
00005b e002                      LDI R16, 0b0000_0010 
00005c 9300 00b1                 STS TCCR2B, R16 ; prescaler 8
                                 
00005e e302                      LDI R16, timr2reset
00005f 9300 00b2                 STS TCNT2, R16
                                 
000061 e549                      LDI timeseg, 0x59
000062 e559                      LDI timemin, 0x59
000063 e263                      LDI timehr, 0x23
000064 e070                      LDI alarmmin, 0x00
000065 e080                      LDI alarmhr, 0x00
000066 e1a2                      LDI month, 0x12
000067 e391                      ldi day, 0x31
                                 
000068 e0b1                      LDI muxshow, 0x01 ; Este nos permitira utilizar el comando swap para negar y denegar el primer bit
000069 9478                      SEI ; habilitamos interrupts 
                                 
                                 ; ////////////////////////////////////////////////////////////////////
                                 
                                  
                                  ; //////////////////////////////////////////////
                                  ; Loop primario
                                  ; //////////////////////////////////////////////
                                 
                                  displayLoop: ; utilizamos este loop para controlar el modo de desplegue (no editar) y si desplegamos tiempo, fecha o alarma
                                 
                                  encenderluzdealarma:
00006a fdd3                       SBRC state, 3 ; revisamos si la alarma esta encendida
00006b 9a42                       SBI PORTC, PC2
00006c ffd3                       SBRS state, 3 
00006d 9842                       CBI PORTC, PC2 ; apagamos el luz de alarma
                                 
00006e ffd5                       SBRS state, 5 ; revisamos si el boton 3 se encendio
00006f c002                       RJMP aftereditcheck
000070 7ddf                       CBR state, 0b0010_0000 ; apagamos el flag del boton
000071 60d4                       SBR state, 0b0000_0100 ; encendemos el flag de editar
                                 
                                  aftereditcheck:
000072 ffd7                       SBRS state, 7 ; revisamos si el boton cambio de estado se activo
000073 c007                       RJMP afteradvancestate
                                 
                                  advancestate: ; utilizamos este bloque para avanzar al siguiente estado cuando se marca el boton cambio de estado
000074 2f1d                       MOV R17, state
000075 7013                      ANDI R17, 0b0000_0011 ; solo queremos modificar los ultimos 2 bits - los de estado
000076 9513                      INC R17
000077 7fdc                      ANDI state, 0b1111_1100
000078 7013                      ANDI R17, 0b0000_0011
000079 2bd1                      OR state, R17
00007a 77df                      CBR state, 0b1000_0000 ; apagamos el flag del boton
                                  
                                  afteradvancestate:
00007b ffd6                       SBRS state, 6 ; revisamos si el boton de decremento de estado se activo
00007c c007                       RJMP displayLoop2
                                 
                                  decreasestate:
00007d 2f1d                       MOV R17, state
00007e 7013                      ANDI R17, 0b0000_0011 ; solo queremos modificar los ultimos 2 bits - los de estado
00007f 951a                      DEC R17
000080 7fdc                      ANDI state, 0b1111_1100
000081 7013                      ANDI R17, 0b0000_0011
000082 2bd1                      OR state, R17
000083 7bdf                      CBR state, 0b0100_0000 ; apagamos el flag del boton
                                  
                                 
                                 
                                 displayLoop2:
                                 
000084 2f1d                      MOV R17, state
000085 7013                      ANDI R17, 0b0000_0011
                                 
                                 checkifsecondsstate: ; mostrar minutos y segundos
000086 e000                      LDI R16, 0x00
000087 1310                      CPSE R17, R16
000088 c001                      RJMP checkifhoursstate
000089 c00c                      RJMP Displaysecondsmode
                                 
                                 checkifhoursstate: ; mostrar horas y minutos
00008a e001                      LDI R16, 0b0000_0001
00008b 1310                      CPSE R17, R16
00008c c001                      RJMP checkifdatestate
00008d c015                      RJMP Displayhoursmode
                                 
                                 checkifdatestate: ; mostrar fecha
00008e e002                      LDI R16, 0b0000_0010
00008f 1310                      CPSE R17, R16
000090 c001                      RJMP checkifalarmstate
000091 c018                      RJMP Displaydatemode
                                 
                                 checkifalarmstate: ; mostrar alarma
000092 e003                      LDI R16, 0b0000_0011
000093 1310                      CPSE R17, R16
000094 cfd5                      RJMP displayLoop
000095 c019                      RJMP Displayalarmmode
                                 
                                 
                                 ; Cuando estamos en modo desplegue, utilizamos el siguiente serie de bloques para mostar valores en los displays 7
                                 
                                  Displaysecondsmode: 
                                  
000096 ffd2                       SBRS state, 2 ; revisamos si el bit de editar esta encendida
000097 c005                       RJMP Displaysecondsmode2
                                 
000098 ffd3                      SBRS state, 3 ; revisamos si la bandera de alarma esta encendida
000099 c002                      RJMP alarmoff
00009a 7fd7                      CBR state, 0b0000_1000 ; si esta encendida desactivamos la alarma
00009b c001                      RJMP Displaysecondsmode2
                                 
                                 alarmoff:
00009c 60d8                      SBR state, 0b0000_1000 ; si esta apagado activamos la alarma
                                 
                                  Displaysecondsmode2:
00009d 7fdb                       CBR state, 0b0000_0100 ; siempre desactivamos el flag de editar
                                 
00009e 2f14                       MOV R17, timeseg
00009f 2f25                       MOV R18, timemin
0000a0 940e 00b4                  CALL sevensegmentmux
0000a2 cfc7                       RJMP displayLoop
                                 
                                 Displayhoursmode:
                                 
0000a3 fdd2                      SBRC state, 2 ; si el registro de editar esta encendido saltamos al bloque respectivo
0000a4 c02d                      RJMP editTime 
                                 
0000a5 2f15                       MOV R17, timemin
0000a6 2f26                       MOV R18, timehr
0000a7 940e 00b4                   CALL sevensegmentmux
0000a9 cfc0                       RJMP displayLoop
                                 
                                  Displaydatemode:
0000aa 2f19                       MOV R17, day
0000ab 2f2a                       MOV R18, month
0000ac 940e 00b4                  CALL sevensegmentmux
0000ae cfbb                       RJMP displayLoop
                                 
                                  Displayalarmmode:
0000af 2f17                       MOV R17, alarmmin
0000b0 2f28                       MOV R18, alarmhr
0000b1 940e 00b4                  CALL sevensegmentmux
0000b3 cfb6                       RJMP displayLoop
                                 
                                 
                                 
                                  ; ///////////////////////////
                                  ; Subrutina de muxeo y desplego en 7 segmentos
                                  ; ///////////////////////////
                                 
                                  sevensegmentmux: ; utilizamos este bloque para desplegar cosas en los 7 segment displays, cargamos el primer dato al R17 y el segundo a R18
                                 
0000b4 e4ec                      LDI ZL, LOW(tabla7seg << 1) ; Seleccionamos el ZL para encontrar al bit bajo en el flash
0000b5 e0f0                      LDI ZH, HIGH(tabla7seg << 1) ; Seleccionamos el ZH para ecnontar al bit alto en el flash
                                 
0000b6 ffb0                      SBRS muxshow, 0 ; revisamos el valor del primer bit en muxshow pare determinar si desplegamos segundos
0000b7 c003                      RJMP dsm2
0000b8 e008                      LDI R16, 0x08
0000b9 b905                      OUT PORTB, R16 ; encendemos el mux correcto
0000ba 701f                      ANDI R17, 0x0F
                                 
                                 dsm2: ; desplego decenas de segundos
0000bb ffb1                      SBRS muxshow, 1 ; revisamos el valor del primer bit en muxshow pare determinar si desplegamos decenas
0000bc c004                      RJMP dsm3
0000bd e004                      LDI R16, 0x04
0000be b905                      OUT PORTB, R16 ; encendemos el mux correcto
0000bf 9512                      SWAP R17
0000c0 701f                      ANDI R17, 0x0F
                                 
                                 dsm3: ; desplego minutos
0000c1 ffb2                      SBRS muxshow, 2 ; revisamos el valor del primer bit en muxshow pare determinar si desplegamos minutos
0000c2 c004                      RJMP dsm4
0000c3 e002                      LDI R16, 0x02
0000c4 b905                      OUT PORTB, R16 ; encendemos el mux correcto
0000c5 702f                      ANDI R18, 0x0F
0000c6 2f12                      MOV R17, R18
                                 
                                 dsm4: ; desplego decenas de minutos
0000c7 ffb3                      SBRS muxshow, 3 ; revisamos el valor del primer bit en muxshow pare determinar si desplegamos decenas de minutos
0000c8 c005                      RJMP dsmend
0000c9 e001                      LDI R16, 0x01
0000ca b905                      OUT PORTB, R16 ; encendemos el mux correcto
0000cb 9522                      SWAP R18
0000cc 702f                      ANDI R18, 0x0F
0000cd 2f12                      MOV R17, R18
                                 
                                 dsmend:
                                 
0000ce 0fe1                      ADD ZL, R17 ; Le agreagamos el valor determinado, para ir al valor especifico de la tabla
0000cf 9104                      LPM R16, Z ; Cargamos el valor del tabla a R16
0000d0 b90b                      OUT PORTD, R16 ; Cargar el valor a PORTD
                                 
0000d1 9508                      RET
                                 
                                 ; //////////////////////////////////////
                                 ; Subrutinas de editar
                                 ; //////////////////////////////////////
                                 
                                 
                                 editTime: ; cambiar hroas
0000d2 7ddf                        CBR state, 0b0010_0000 
                                 
0000d3 940e 0105                   CALL editTimeDisplay
                                 
0000d5 fdd5                        SBRC state, 5 ; si el boton 3 se apacha vamos al estado de cambiar minutos
0000d6 c012                        RJMP editTimemins
                                 
0000d7 ffd7                        SBRS state, 7 ; si el boton 2 se apacha incrementamos el tiempo por uno
0000d8 cff9                        RJMP editTime
                                 
0000d9 77df                        CBR state, 0b1000_0000
                                 
0000da 9563                        INC timehr ; Incrementamos el contador de horas
0000db 2f16                      MOV R17, timehr
0000dc e204                      LDI R16, 0x24
0000dd 1310                      CPSE R17, R16 ; revisamos si ha llegado a 24
0000de c002                      RJMP editTimeHr2
                                 
0000df e060                      LDI timehr, 0x00 ; si es igual a 24 lo reiniciamos
0000e0 cff1                      RJMP edittime
                                 
                                 editTimeHr2:
0000e1 701f                      ANDI R17, 0x0F ; solo queremos ver las horas
0000e2 e00a                      LDI R16, 10
0000e3 1310                      CPSE R17, R16 ; revisamos que no haya superado 10
0000e4 cfed                      RJMP editTime ; Si no ha superado los 10 terminamos la interrupcion
                                 
0000e5 7f60                      ANDI timehr, 0xF0 ; reseteamos el contador de hrs
0000e6 e100                      LDI R16, 0x10
0000e7 0f60                      ADD timehr, R16 ; le sumamos 1 a las decenas
0000e8 cfe9                      RJMP editTime
                                 
                                 
                                   editTimemins:
                                 
0000e9 7ddf                        CBR state, 0b0010_0000
                                 
0000ea 940e 0105                   CALL editTimeDisplay
                                 
0000ec fdd7                        SBRC state, 7 ; si el boton 2 se apacha terminamos
0000ed c014                        RJMP editTimeEnd
                                 
0000ee ffd6                        SBRS state, 6 ; si el boton 1 se apacha incrementamos el tiempo por uno
0000ef cff9                        RJMP editTimeMins
                                 
0000f0 77df                        CBR state, 0b1000_0000
                                 
0000f1 9553                          INC timemin ; Incrementamos el contador de segundos
0000f2 e00a                      LDI R16, 10
0000f3 2f15                      MOV R17, timemin
0000f4 701f                      ANDI R17, 0x0F ; solo queremos ver los segundos
0000f5 1310                      CPSE R17, R16 ; revisamos que no haya superado 10
0000f6 cff2                      RJMP editTimemins ; Si no ha superado los 10 regresamos
                                 
                                 ; revision decenas
0000f7 7f50                      ANDI timemin, 0xF0 ; colocamos a contador de segundos en 0
0000f8 e100                      LDI R16, 0x10
0000f9 0f50                      ADD timemin, R16 ; incrementamos el contador de decenas
0000fa e006                      LDI R16, 6 
0000fb 2f15                      MOV R17, timemin
0000fc 9512                      SWAP R17 ; colocamos decenas en los primeros 4 bits
0000fd 701f                      ANDI R17, 0x0F 
0000fe 1310                      CPSE R17, R16 ; revisamos que no haya superado 60
0000ff cfe9                      RJMP editTimemins ; Si no ha superado los 60 terminamos la interrupcion
000100 e050                      LDI timemin, 0x00 
                                 
000101 cfe7                      RJMP editTimemins
                                 
                                 editTimeEnd:
000102 e040                        LDI timeseg, 0x00 ; reiniciamos segundos
000103 7ddb                        CBR state, 0b0010_0100 ; apagamos el flag de edit y el del boton
                                 
000104 cf65                        RJMP displayLoop ; regresamos el modo display
                                 
                                 editTimeDisplay:
000105 2f15                      MOV R17, timemin
000106 2f26                       MOV R18, timehr
000107 940e 00b4                   CALL sevensegmentmux ; desplegamos el tiempo en horas y minutos en el debounce
000109 9508                        RET
                                 
                                 ; ///////////////////////////////////
                                 ; Subrutina cambio de tiempo
                                 ; //////////////////////////////////
                                 
                                 timecheck:
00010a 77df                      CBR state, 0x80
                                 
                                 ; revisamos si el alarma esta activado
00010b ffd3                       SBRS state, 3
00010c c009                       RJMP afteralarmcheck
                                 
00010d e010                       LDI R17, 0x00
00010e 1357                       CPSE timemin, alarmmin
00010f 9513                       INC R17
                                 
000110 1368                       CPSE timehr, alarmhr
000111 9513                       INC R17
                                 
000112 e000                       LDI R16, 0x00
000113 1301                       CPSE R16, R17 
000114 c001                       RJMP afteralarmcheck
000115 9a43                       SBI PORTC, PC3 ; encendemos la alarma
                                  
                                  afteralarmcheck:
                                 
                                 ; revision segundos
000116 9543                      INC timeseg ; Incrementamos el contador de segundos
000117 e00a                      LDI R16, 10
000118 2f14                      MOV R17, timeseg
000119 701f                      ANDI R17, 0x0F ; solo queremos ver los segundos
00011a 1310                      CPSE R17, R16 ; revisamos que no haya superado 10
00011b c04a                      RJMP timecheckend ; Si no ha superado los 10 terminamos la interrupcion
                                 
                                 ; revision decenas
00011c 7f40                      ANDI timeseg, 0xF0 ; colocamos a contador de segundos en 0
00011d e100                      LDI R16, 0x10
00011e 0f40                      ADD timeseg, R16 ; incrementamos el contador de decenas
00011f e006                      LDI R16, 6 
000120 2f14                      MOV R17, timeseg
000121 9512                      SWAP R17 ; colocamos decenas en los primeros 4 bits
000122 701f                      ANDI R17, 0x0F 
000123 1310                      CPSE R17, R16 ; revisamos que no haya superado 60
000124 c041                      RJMP timecheckend ; Si no ha superado los 60 terminamos la interrupcion
                                 
                                 ; revision minutos
000125 704f                      ANDI timeseg, 0x0F ; colocamos el contador de decenas de segundos en 0
000126 9553                      INC timemin ; Incrementamos el contador de segundos
000127 e00a                      LDI R16, 10
000128 2f15                      MOV R17, timemin
000129 701f                      ANDI R17, 0x0F ; solo queremos ver los minutos
00012a 1310                      CPSE R17, R16 ; revisamos que no haya superado 10
00012b c03a                      RJMP timecheckend ; Si no ha superado los 10 terminamos la interrupcion
                                 
                                 ; revision decenas de minutos
00012c 7f50                      ANDI timemin, 0xF0 ; colocamos a contador de minutos en 0
00012d e100                      LDI R16, 0x10
00012e 0f50                      ADD timemin, R16 ; incrementamos el contador de decenas
00012f e006                      LDI R16, 6 
000130 2f15                      MOV R17, timemin
000131 9512                      SWAP R17 ; colocamos decenas en los primeros 4 bits
000132 701f                      ANDI R17, 0x0F 
000133 1310                      CPSE R17, R16 ; revisamos que no haya superado 60
000134 c031                      RJMP timecheckend ; Si no ha superado los 60 terminamos la interrupcion
                                 
                                 ; revision horas
000135 705f                      ANDI timemin, 0x0F ; colocamos el contador de decenas de segundos en 0
000136 9563                      INC timehr ; Incrementamos el contador de segundos
000137 2f16                      MOV R17, timehr
000138 701f                      ANDI R17, 0x0F ; solo queremos ver las horas
                                 
                                 reseton10hr:
000139 e00a                      LDI R16, 10
00013a 1310                      CPSE R17, R16 ; revisamos que no haya superado 10
00013b c004                      RJMP checkifnextday ; Si no ha superado los 10 terminamos la interrupcion
                                 
00013c 7f60                      ANDI timehr, 0xF0 ; reseteamos el contador de hrs
00013d e100                      LDI R16, 0x10
00013e 0f60                      ADD timehr, R16 ; le sumamos 1 a las decenas
00013f c026                      RJMP timecheckend
                                 
                                 ; revision dias
                                 checkifnextday: ; solo ejecutar si horas (no decenas) = 4
000140 e204                      LDI R16, 0x24
000141 2f16                      MOV R17, timehr
000142 1310                      CPSE R17, R16 ; revisamos si los decenas on iguales a 2
000143 c022                      RJMP timecheckend
000144 e060                      LDI timehr, 0x00
000145 9593                      INC day
                                 
                                 ; revisamos si llegamos a decenas de dias
000146 e00a                      LDI R16, 10
000147 2f19                      MOV R17, day
000148 701f                      ANDI R17, 0x0F
000149 1310                      CPSE R17, R16
00014a c003                      RJMP checkifnextmonth
                                 
00014b 7f90                      ANDI day, 0xF0 ; colocamos a contador de dias en 0
00014c e100                      LDI R16, 0x10
00014d 0f90                      ADD day, R16 ; incrementamos el contador de decenas de dias
                                 
                                 checkifnextmonth: ; utilizamos este bloque para cargar valores de los meses y despues revisar si el dia llega a esa cantidad
00014e e5ec                      LDI ZL, LOW(monthlengths << 1) ; Seleccionamos el ZL para encontrar al bit bajo en el flash
00014f e0f0                      LDI ZH, HIGH(monthlengths << 1) ; Seleccionamos el ZH para ecnontar al bit alto en el flash
000150 2f1a                      MOV R17, month
000151 951a                      DEC R17
000152 0fe1                      ADD ZL, R17
000153 9104                      LPM R16, Z ; Cargamos el valor del tabla a R16
000154 9503                      INC R16 ; le agregamos uno mas porque ahora el valor del dia es uno mas que el ultimo dia del mes
                                 
                                 
000155 1309                      CPSE R16, day ; revisamos si ha llegado al maximo del dado mes
000156 c00f                      RJMP timecheckend
                                 
                                 ; revision meses
000157 e091                      LDI day, 0x01
000158 95a3                      INC month
                                 
000159 e00a                      LDI R16, 10
00015a 2f1a                      MOV R17, month
00015b 701f                      ANDI R17, 0x0F
00015c 1310                      CPSE R17, R16
00015d c003                      RJMP checkifnextyear
                                 
00015e 7fa0                      ANDI month, 0xF0 ; colocamos a contador de dias en 0
00015f e100                      LDI R16, 0x10
000160 0fa0                      ADD month, R16 ; incrementamos el contador de decenas de meses
                                 
                                 checkifnextyear:
000161 e103                      LDI R16, 0x13
000162 2f1a                      MOV R17, month
000163 1310                      CPSE R17, R16 ; revisamos si los decenas on iguales a 2
000164 c001                      RJMP timecheckend
000165 e0a1                      LDI month, 0x01
                                 
                                 timecheckend:
000166 9508                      RET
                                 
                                 
                                 ; ////////////////////////////////////////////////////
                                 ; Subrutinas de interrupcion
                                 ; ////////////////////////////////////////////////////
                                 
                                 ISR_PCINT1: ; Para el cambio de pines
                                 
                                 ; debounce
000167 fdc7                      SBRC debouncetimer, 7 ; revisamos si el debounce es activo, en caso que si no realizamos todo lo demas
000168 9518                      RETI
                                 
000169 9b43                      SBIS PORTC, PC3 ; vemos si la alarma esta encendida
00016a c002                      RJMP afterturningoffalarm
00016b 9843                      CBI PORTC, PC3 ; apagamos la alarma cuando cualquier boton se activa
00016c 7fd7                      CBR state, 0b0000_1000 ; tambien apagamos el flag de que la alarma esta encendida
                                 
                                 afterturningoffalarm:
00016d efcf                      LDI debouncetimer, 0XFF ; le colocamos 25.5ms al debouncetimer
                                 
00016e 9930                      SBIC PINC, PC0 
00016f c002                      RJMP button2check
                                 
000170 64d0                      SBR state, 0b0100_0000 ; marcamos que se activo el primer boton 
000171 9518                      RETI
                                 
                                 button2check:
000172 9931                      SBIC PINC, PC1
000173 c001                      RJMP button3check
000174 68d0                      SBR state, 0b1000_0000 ; marcamos que se activo el segundo  boton 
                                 
                                 button3check:
000175 9934                      SBIC PINC, PC4
000176 9518                      RETI
000177 62d0                      SBR state, 0b0010_0000 ; marcamos que se activo el tercer boton
                                 
000178 9518                      RETI
                                 
                                 
                                 ISR_TIMR2:
000179 e302                      LDI R16, timr2reset ; Cargamos 0.1ms al timer2
00017a 9300 00b2                 STS TCNT2, R16
                                 
00017c fdc7                      SBRC debouncetimer, 7 ; revisamos si el debounce esta activo
00017d 95ca                      DEC debouncetimer ; decrementamos el debounce timer cada 10ms
                                 
                                 ; Control de muxeo de los 7 segment displays
00017e 0fbb                      LSL muxshow
00017f fdb4                      SBRC muxshow, 4
000180 e0b1                      LDI muxshow, 0x01
                                 
                                 endtimr2:
000181 9ab8                      SBI TIFR2, 0 ; Colocamos un 0 TV0 para reiniciar el timer
000182 9518                      RETI
                                 
                                 
                                 
                                 /// ISR TIMR y control de tiempo
                                 
                                 
                                 ISR_TIMR0: ; Para el cambio de timer0
                                 
000183 fdd7                      SBRC state, 7
000184 c008                      RJMP endtimr0
                                 
000185 ee0b                      LDI R16, timr1reset ; Cargamos 10ms al timer0
000186 bd06                      OUT TCNT0, R16
                                 
                                 outerloopdecrease:
000187 953a                      DEC outerloop
000188 f421                      BRNE endtimr0
                                 
000189 e634                      LDI outerloop, 100 ; le cargamos 100 al segundo loop 
                                 
00018a ffd4                      SBRS state, 0b0000_0100 ; si el flag de editar esta encendido no activamos la subrutina cambio del tiempo
00018b 940e 010a                 CALL timecheck ; rutina cambio de tiempo
                                 
                                 endtimr0:
00018d 9518                      RETI
                                 
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   2 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 102 r17:  74 r18:  10 r19:   2 r20:   9 
r21:  17 r22:  15 r23:   3 r24:   3 r25:   8 r26:   9 r27:   8 r28:   4 
r29:  39 r30:   4 r31:   2 
Registers used: 17 out of 35 (48.6%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   9 adiw  :   0 and   :   0 
andi  :  30 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   1 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   8 cbi   :   2 cbr   :  12 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   0 cpse  :  21 dec   :   4 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :  11 jmp   :   4 
ld    :   0 ldd   :   0 ldi   :  71 lds   :   0 lpm   :   4 lsl   :   1 
lsr   :   0 mov   :  28 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   2 ori   :   0 out   :  16 pop   :   0 
push  :   0 rcall :   0 ret   :   3 reti  :   6 rjmp  :  52 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   3 sbic  :   3 sbis  :   1 
sbiw  :   0 sbr   :   5 sbrc  :   8 sbrs  :  14 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  10 
sub   :   0 subi  :   0 swap  :   5 tst   :   0 wdr   :   0 
Instructions used: 28 out of 113 (24.8%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00031c    710     34    744   32768   2.3%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
